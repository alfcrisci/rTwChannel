{
    "collab_server" : "",
    "contents" : "#' channel_analytic\n#'\n#' @description Extract many informative stats and object  from a set of tweet messages parsed as channel\n#'\n#' @param  channel_obj  data.frame Dataset of tweets\n#' @param  use_channel_dates Logical Use temporal indication of channel\n#' @param  start_date   Character Date of analisys starting.\n#' @param  end_date   Character Date of  analisys ending.\n#' @param  Ntop Integer indicate the maximum number for top statistics\n#' @param  Nmin Integer indicate the minimal data numerosity\n#' @param  naming Character Indicate which naming framework is adopted.\n#' @param  only_original_tweet Logical Taking into account only original. Default all tweets are considered.\n#' @param  lowercase logical Consider  all text as lower case. Default is TRUE.\n#' @param  stopword Character stopword set to be use to calculate word frequency matrix. Default italian stopwords of R tm package.\n#' @param  corpus_hashtag logical Corpus analisys not considering the hashtag.\n#' @param  account_tw CharacterUser account if naming parameter is an \"account_statistics\".\n#' @param  graph_analisys Igraph object Graph analisys done. default is FALSE.\n#' @param  corpus_analisys qDap object Corpora analisys done. Default is FALSE.\n#' @return Return a R list object  for channel analisys:\n#' @return channel_stat list: Channel summaries of following parameters.\n#' @return daily_stat data.frame : Daily channel statistics featured by \n#' @return table_message data.frame :Frequency data  of messages.\n#' @return table_hash data.frame : Frequency data  hashtags.\n#' @return table_mentions data.frame : Frequency data of mentions.\n#' @return table_links data.frame : Frequency data.frame of urls.\n#' @return table_authors data.frame : Frequency data of authors.\n#' @return table_authors_retweeter data.frame : Frequency data.frame of authors that are active retweeter.\n#' @return retweeted_authors data.frame : Frequency of retweeted authors.\n#' @return favorite_authors data.frame : Frequency data of favorited authors.\n#' @return favorite_message data.frame : Rank of Favorite messages.\n#' @return rank_message_retweeted data.frame : Frequency of retweeted message.\n#' @return top_message data.frame : TopN messages in channel.\n#' @return top_authors data.frame : TopN authors in channel.\n#' @return top_hash data.frame : TopN hashtag.\n#' @return top_mentions data.frame : TopN user mentioned.\n#' @return top_links data.frame : TopN links.\n#' @return topfull_authors_retweeter data.frame : TopN author that have retweeted.\n#' @return topfull_message_retweeted data.frame : TopN message that have retweeted- \n#' @return graph_retweet igraph object: Simplified Retweet graph\n#' @return graph_mentions igraph object: Simplified Mention graph object as igraph R object\n#' @return channel_data data.frame: Channel_data used for analisys with other ancillary variables.\n#' @return channel_corpus wfm object:  Corpus of messages without mentions and links and optionally without hashtag.\n#' @return word_freq_matr qdap wfm object : Word frequency matrix.\n#' @return account_stats data.frame : Statistic account's activity by date.\n#'\n#' @author  Istituto di Biometeorologia Firenze Italy  Alfonso Crisci \\email{a.crisci@@ibimet.cnr.it}\n#' @keywords  channel,stats\n#'\n#'\n#'\n#' @export\n#'\n#'\n\nchannel_analytic=function(channel_obj,use_channel_dates=TRUE, start_date=NULL, end_date=NULL,Ntop=11,\n                          Nmin=25,naming=\"\",only_original_tweet=FALSE,lowercase=TRUE,stopword = tm::stopwords(\"it\"), \n                          account_tw=\"\",corpus_hashtag=TRUE,graph_analisys=FALSE,corpus_analisys=FALSE) \n                          \n                          {\n  \n  \n \n  #####################################################################################\n  # Data checks\n  \n  if ((naming == \"account_analitics\") &&   (account_tw == \"\") ) { stop(\"Channel analitics need an Twitter account!\")};\n  \n  if ( naming == \"account_analitics\")  {message(paste(\"Account Twitter:\",account_tw,\"\\n\"))}\n  #####################################################################################\n  # Create sequence of dates\n  \n  seq_date_channel=seq(as.Date(range(channel_obj$date)[1]),as.Date(range(channel_obj$date)[2]),by=1)\n  rangeseq=range(seq_date_channel)\n  \n  if (use_channel_dates==TRUE) { start_date=rangeseq[1]; end_date=rangeseq[2]};\n  \n  if (((class(as.Date(start_date))!=\"Date\") ||  (class(as.Date(end_date))!=\"Date\")) & (use_channel_dates==FALSE)) { stop(\"Start or Ending date to be defined!\")};\n  \n  if (as.Date(start_date) > as.Date(end_date)) { stop(\" End Date is older than Start date! \")};\n  \n  \n  rows=nrow(channel_obj)\n  \n  ##############################################################################################################\n  # Check minimal dimensionality\n  \n  if (rows < Nmin) { stop(\"Channel with too few records.\")};\n  \n  \n  message(paste(\"Channel:\", deparse(substitute(channel_obj)),\"\\n\",\n                \"Elements:\", rows ,\"\\n\", \n                \"Ntop:\", Ntop  ,\"\\n\",\n                \"Minimum data:\",Nmin,\"\\n\",\n                \"Type stream:\",naming,\"\\n\",\n                \"Native Channel:\",only_original_tweet,\"\\n\",\n                \"Lowering case message's text:\",lowercase,\"\\n\"))\n \n  \n \n  ############################################################################################################################\n  # Format and rename data\n  \n  if ( naming == \"TAGS\") {\n    channel_obj$text=gsub(\"[\\x80-\\xFF]\",\"\",channel_obj$message) # remove multibyte\n    channel_obj$created <- lubridate::dmy_hms(channel_obj$time)\n    channel_obj=channel_obj[which(!is.na(channel_obj$created)),]\n    channel_obj$date <- as.Date(lubridate::dmy_hms(channel_obj$created))\n    channel_obj$screeName=channel_obj$from_user\n    channel_obj$id=as.numeric(channel_obj$id_str)\n    channel_obj$lang=channel_obj$user_lang\n    channel_obj$from_user<-NULL\n    channel_obj$user_lang<-NULL\n    channel_obj$message<-NULL\n    channel_obj$created_at<-NULL\n    channel_obj$retweetCount<-rep(NA,nrow(channel_obj))\n    channel_obj$entities_str<-NULL\n    channel_obj$favoriteCount<-rep(NA,nrow(channel_obj))\n    channel_obj$ls_hash_full<-rep(NA,nrow(channel_obj))\n    channel_obj$ls_links=rep(NA,nrow(channel_obj))\n    channel_obj$publicationTime <- channel_obj$time\n    channel_obj$time<-NULL\n    channel_obj=channel_obj[rev(1:nrow(channel_obj)),]\n    channel_obj$hour=lubridate::hour(lubridate::ymd_hms(channel_obj$publicationTime))\n    channel_obj$month=lubridate::month(lubridate::ymd_hms(channel_obj$publicationTime))\n    channel_obj$mentions=unlist(lapply(extract_mentions(x$text),function(x) paste(x,collapse = \" \")))\n    channel_obj$links=unlist(lapply(extract_links(x$text),function(x) paste(x,collapse = \" \")))\n    channel_obj$hashtagsOnTwitter=unlist(lapply(extract_hashtag(x$text),function(x) paste(x,collapse = \" \")))\n    channel_obj$locationUser=NA\n    channel_obj$place=NA\n    channel_obj$time_zone=NA\n    channel_obj$class_users=NA\n    channel_obj$class_hashtag=NA\n    channel_obj$class_message=NA\n    channel_obj$class_custom=NA\n    channel_obj$geo_lat=channel_obj$latitude\n    channel_obj$geo_long=channel_obj$longitude\n    \n  }\n  \n  \n  if ( naming == \"DISIT\") {\n    \n    channel_obj$text=gsub(\"[\\x80-\\xFF]\",\"\",channel_obj$message) # remove multibyte\n    channel_obj$date=as.character(as.Date(lubridate::ymd_hms(channel_obj$publicationTime)))\n    channel_obj$screenName=channel_obj$twitterUser\n    channel_obj$created=channel_obj$publicationTime\n    channel_obj$id=channel_obj$twitterId\n    channel_obj$message<-NULL\n    channel_obj$hour=lubridate::hour(lubridate::ymd_hms(channel_obj$publicationTime))\n    channel_obj$month=lubridate::month(lubridate::ymd_hms(channel_obj$publicationTime))\n    channel_obj$isRetweet=channel_obj$retweet\n    channel_obj$retweet<-NULL\n    channel_obj$class_users=NA\n    channel_obj$class_hashtag=NA\n    channel_obj$class_message=NA\n    channel_obj$class_custom=NA\n    channel_obj$geo_lat[which(channel_obj$geo_lat==0)]=NA\n    channel_obj$geo_long[which(channel_obj$geo_long==0)]=NA\n    \n  }\n  \n\n    \n  if ( naming == \"twitter\") {\n    \n    channel_obj$date=as.Date(channel_obj$created)\n    channel_obj$hour=lubridate::hour(channel_obj$created)\n    channel_obj$month=lubridate::month(channel_obj$created)\n    channel_obj$text=gsub(\"[\\x80-\\xFF]\",\"\",x$text)\n    channel_obj$isRetweet=as.numeric(channel_obj$isRetweet)\n    channel_obj$publicationTime=channel_obj$created\n    channel_obj$mentions=unlist(lapply(extract_mentions(x$text),function(x) paste(x,collapse = \" \")))\n    channel_obj$links=unlist(lapply(extract_links(x$text),function(x) paste(x,collapse = \" \")))\n    channel_obj$hashtagsOnTwitter=unlist(lapply(extract_hashtag(x$text),function(x) paste(x,collapse = \" \")))\n    channel_obj$locationUser=NA\n    channel_obj$place=NA\n    channel_obj$time_zone=NA\n    channel_obj$class_users=NA\n    channel_obj$class_hashtag=NA\n    channel_obj$class_message=NA\n    channel_obj$class_custom=NA\n    channel_obj$geo_lat=channel_obj$latitude\n    channel_obj$geo_long=channel_obj$longitude\n    \n  }\n  \n  if (naming == \"account_analitics\")\n  {\n    channel_obj=channel_obj[,1:22]\n    name_user_tweet_activity=c(\"id\",\"link_tweet\",\"text\",\"dateTime\",\"impress\",\"interazioni\",\"inter_rate\",\n                               \"retweetCount\",\"repliesCount\",\"favoriteCount\",\"clickonuserprofile\",\"clickonlink\",\n                               \"clickonlinkhash\",\"details\",\"clickonPermalinks\",\"open_app\",\"n_install_app\",\n                               \"followsCount\",\"email_send\",\"tel_calls\",\"mediaVisCount\",\"interVisCount\") \n    names(channel_obj)=name_user_tweet_activity\n    channel_obj$date=as.Date(channel_obj$dateTime)\n    channel_obj$hour=lubridate::hour(channel_obj$dateTime)\n    channel_obj$month=lubridate::month(channel_obj$dateTime)\n    channel_obj$screenName=account_tw\n    channel_obj$text=gsub(\"[\\x80-\\xFF]\",\"\",x$text)\n    channel_obj$mentions=unlist(lapply(extract_mentions(x$text),function(x) paste(x,collapse = \" \")))\n    channel_obj$links=unlist(lapply(extract_links(x$text),function(x) paste(x,collapse = \" \")))\n    channel_obj$hashtagsOnTwitter=unlist(lapply(extract_hashtag(x$text),function(x) paste(x,collapse = \" \")))\n    \n    \n  }\n  \n  #####################################################################################\n  # Impose date time ordering\n  \n  channel_obj=channel_obj[order(channel_obj$date),]\n  #####################################################################################\n  # Lowering case message\n  \n  if ( lowercase == TRUE) {\n    channel_obj$text=tolower(channel_obj$text)\n  }\n  \n   \n  #####################################################################################\n  # Temporal filter of channel\n  \n  if ( use_channel_dates == FALSE) \n    {\n    seq_date_channel=date=seq(as.Date(start_date),as.Date(end_date),by=1) \n    channel_obj=channel_obj[which((seq_date_channel%in% channel_obj$date)==T),]  \n   }\n  \n  #####################################################################################\n  # Create data.frames for other count statistics.\n   \n   if (only_original_tweet==TRUE) { channel_obj=channel_obj[which(channel_obj$isRetweet==0),];\n                                   }\n  \n\n  mat_retweet_df=data.frame(date=NA,message=NA,authors=NA,retweeted_users=NA)\n  \n  #######################################################################################\n  # Create data.frame date,retweeted_authors and authors.\n  \n  if ( (length(channel_obj$isRetweet[which(channel_obj$isRetweet==1)]) > 0) && (only_original_tweet==FALSE))  { \n    \n    id_retweet=which(channel_obj$isRetweet==1)\n    retweeter_authors=channel_obj$screenName[id_retweet]\n    retweeted_users=unlist(lapply(channel_obj$mentions[id_retweet],function(x) unlist(strsplit(x,\" \"))[1]))\n    mat_retweet_df=na.omit(data.frame(date=channel_obj$date[id_retweet],message=channel_obj$text[id_retweet],authors=retweeter_authors,retweeted_users=retweeted_users))\n    \n    }\n \n  ######################################################################################################################################################################################\n  # mentions\n  \n  id=which(channel_obj$mentions!=\"\")\n  mat_mentions=na.omit(data.frame(date=channel_obj$date[id],whomentions=channel_obj$screenName[id],mentioned=gsub(\"@\",\"\",channel_obj$mentions[id]),stringsAsFactors = F))\n  mat_mentions_df=do.call(\"rbind\",apply(mat_mentions,1,FUN=function(x) data.frame(expand.grid(x[1],x[2],as.character(unlist(strsplit(x[3],\" \")),stringsAsFactors = F)))))\n  names(mat_mentions_df)=c(\"date\",\"whomention\",\"whomentioned\")\n\n  id=which(channel_obj$hashtagsOnTwitter!=\"\")\n  mat_hashtag=na.omit(data.frame(date=channel_obj$date[id],whohashtag=channel_obj$screenName[id],hashtags=channel_obj$hashtagsOnTwitter[id],stringsAsFactors = F))\n  mat_hashtag_df=do.call(\"rbind\",apply(mat_hashtag,1,FUN=function(x) data.frame(expand.grid(x[1],x[2],as.character(unlist(strsplit(x[3],\" \")),stringsAsFactors = F)))))\n  names(mat_hashtag_df)=c(\"date\",\"whohashtag\",\"hashtag\")\n  \n  \n  id=which(channel_obj$links!=\"\")\n  mat_links=na.omit(data.frame(date=channel_obj$date[id],wholinks=channel_obj$screenName[id],links=channel_obj$links[id]),stringsAsFactors = F)\n  mat_links_df=do.call(\"rbind\",apply(mat_links,1,FUN=function(x) data.frame(expand.grid(x[1],x[2],as.character(unlist(strsplit(x[3],\" \")),stringsAsFactors = F)))))\n  names(mat_links_df)=c(\"date\",\"wholinks\",\"links\")\n  \n  message(\"Text message are processed!\\n\") \n  \n  \n \n   \n  #########################################################################\n  # Create daily channel stats\n  \n  channel_stats=fastChannelstat(channel_obj,stream=\"\")\n  \n  daily_stat=daily_channel_stat(channel_obj)\n  \n  message(\"Daily stats calculated!\\n\")\n  \n  rank_message_retweeted=data.frame(message=NA,SumretweetCount=NA)\n  rank_authors_retweeted=data.frame(message=NA,SumretweetCount=NA)\n  table_retweeted=data.frame(author_retweeter=NA,freq=NA)\n  \n  rank_authors_favorited=aggregate(as.numeric(ls_favorite_df$favoriteCount),list(ls_favorite_df$authors),sum)\n  rank_authors_favorited=rank_authors_favorited[order(-rank_authors_favorited[,2]),]\n  \n  names(rank_authors_favorited)<-c(\"authors\",\"SumfavoriteCount\")\n  \n  \n \n  #######################################################################################\n  # Create favorite data.frame date,message and authors.\n  \n  id=which(channel_obj$favoriteCount>0)\n  N_favorited=length(id)\n  \n  ls_favorite_df=data.frame(date=channel_obj$date[id],\n                            message=channel_obj$text[id],\n                            authors=channel_obj$screenName[id],\n                            favoriteCount=channel_obj$favoriteCount[id],\n                            is.retweet=channel_obj$isRetweet[id])[order(-as.numeric(channel_obj$favoriteCount[id])),]\n  \n  \n  \n  ls_message_df=data.frame(data=channel_obj$date,\n                           message=channel_obj$text,\n                           authors=channel_obj$screenName,\n                           retweetCount=channel_obj$retweetCount,\n                           is.retweet=channel_obj$isRetweet)[order(-as.numeric(channel_obj$retweetCount)),]\n  \n\n  \n   \n  \n  #################################################################################\n  # Frequency analisys\n  \n  if ( (length(channel_obj$isRetweet[which(channel_obj$isRetweet==1)]) > 0) && (only_original_tweet==FALSE)) {\n    \n    rank_message_retweeted=aggregate(as.numeric(ls_message_df$retweetCount),list(ls_message_df$message),sum)\n    rank_message_retweeted=rank_message_retweeted[order(-rank_message_retweeted[,2]),]\n    names(rank_message_retweeted)<-c(\"message\",\"SumretweetCount\")\n    \n    rank_authors_retweeted=aggregate(as.numeric(ls_message_df$retweetCount),list(ls_message_df$authors),sum)\n    rank_authors=rank_authors_retweeted[order(-rank_authors_retweeted[,2]),]\n    names(rank_authors_retweeted)<-c(\"authors\",\"SumretweetCount\")\n    \n    table_retweeter=as.data.frame.array(sort(table(tolower(mat_retweet_df$authors)),decreasing=T))\n    table_retweeter=data.frame(authors=rownames(table_retweeter),\n                             Freq=as.vector(table_retweeter))\n    names(table_retweeter)<-c(\"author_retweeter\",\"freq\")\n    rownames(table_retweeter)<-NULL\n    \n      \n  }\n  \n  ##########################################################################\n  \n\n  table_message=as.data.frame.array(sort(table(tolower(channel_obj$text)),decreasing=T))\n  table_message=data.frame(message=rownames(table_message),\n                           Freq=as.vector(table_message))\n  \n  names(table_message)<-c(\"message\",\"freq\")\n  \n  rownames(table_message)<-NULL\n\n  message(\"Table_message stats calculated!\\n\")\n  \n  \n  ##########################################################################\n\n  table_authors=as.data.frame.array(sort(table(tolower(channel_obj$screenName)),decreasing=T))\n  table_authors=data.frame(authors=rownames(table_authors),\n                           Freq=as.vector(table_authors))\n  names(table_authors)<-c(\"author\",\"freq\")\n  rownames(table_authors)<-NULL\n  \n\n  \n  ##########################################################################\n  \n  table_hash=as.data.frame.array(sort(table(tolower(mat_hashtag_df$hashtag)),decreasing=T))\n  table_hash=data.frame(hashtag=rownames(table_hash),\n                        Freq=as.vector(table_hash))\n  names(table_hash)<-c(\"hashtag\",\"freq\")\n  rownames(table_hash)<-NULL\n  \n  ##########################################################################\n  \n  table_mentions=as.data.frame.array(sort(table(mat_mentions_df$whomentioned),decreasing=T))\n  table_mentions=data.frame(users=rownames(table_mentions),\n                            Freq=as.vector(table_mentions))\n  names(table_mentions)<-c(\"mention\",\"freq\")\n  rownames(table_mentions)<-NULL\n  \n  \n \n  ##########################################################################\n  # Graph analitics\n \n  rt_graph=NULL\n  men_graph=NULL\n  \n  if ( graph_analisys==TRUE) {\n  \n  ############################################################################################################\n  # Create a mention graph\n \n  mat_men_graph=data.frame(whomention=as.character(mat_mentions_df$whomention),whomentioned=as.character(mat_mentions_df$whomentioned))\n  men_graph = igraph::graph.edgelist(as.matrix(mat_men_graph))\n  E(men_graph )$weight <- 1\n  men_graph <- igraph::simplify(men_graph,edge.attr.comb = list(weight = \"sum\", function(x)length(x)))\n  E(men_graph)$weight\n  \n  \n   \n  ############################################################################################################\n  # Create a retweet graph\n  \n  \n  if ((naming!=\"account_statistics\") & (length(channel_obj$isRetweet[which(channel_obj$isRetweet==1)]) > 0)) \n    \n                { \n               rt_graph=data.frame(whoretweet=as.character(mat_retweet_df$authors),whomentioned=as.character(mat_retweet_df$retweeted_users))\n               rt_graph = igraph::graph.edgelist(as.matrix(rt_graph))\n               E(rt_graph )$weight <- 1\n               rt_graph <- igraph::simplify(rt_graph,edge.attr.comb = list(weight = \"sum\", function(x)length(x)))\n               message(\"Retweet  Graph of channel are done!\\n\")\n          \n  }\n  }\n  \n  message(\"Mention Graph of channel are done!\\n\")\n  \n  ############################################################################################################\n  # Get corpus and termdocfrequency matrix as qdap object\n  \n  corpus=NULL\n  word_freq_matr=NULL\n  \n  if ( (corpus_analisys==TRUE) & (length(channel_obj$isRetweet[which(channel_obj$isRetweet==0)]) > 0)) \n                               {\n    \n                               corpus=getCorpus(channel_obj$text[which(channel_obj$isRetweet==0),],hashtag=corpus_hashtag)\n                               word_freq_matr=qdap::wfm(corpus,stopwords=stopword)\n       \n                               message(\"Corpus analisys of channel are done!\\n\")\n                               }\n  \n  \n  \n  ########################################################################################\n  \n  res=list(channel_stat=full_stat,\n           daily_stat=daily_stat,\n           table_hash=table_hash,\n           table_message=table_message,\n           table_mentions=table_mentions,\n           table_links=table_links,\n           table_authors=table_authors,\n           table_authors_retweeter=table_retweeter,\n           retweeted_authors=rank_authors_retweet,\n           favorited_authors=rank_authors_favorite,\n           favorite_message=ls_favorite_df,\n           rank_message_retweeted=rank_message_retweet,\n           top_message=table_message[1:Ntop,],\n           top_authors=table_authors[1:Ntop,],\n           top_hash=table_hash[1:Ntop,],\n           top_mentions=table_mentions[1:Ntop,],\n           top_authors_retweeter=table_retweeter[1:Ntop,],\n           topfull_authors_retweeted=rank_authors_retweet[1:Ntop,],\n           topfull_message_retweeted=rank_message_retweet[1:Ntop,],\n           graph_retweet=rt_graph,\n           graph_mentions=men_graph,\n           channel_data=channel_obj,\n           account_stats=NULL,\n           channel_corpus=corpus,\n           word_freq_matr=word_freq_matr\n)\n  \n  if (naming==\"account_statistics\") \n    \n  { stats_activity=aggregate(channel_obj[,5:22], list(channel_obj$data), sum)\n    names(stats_activity)[1]=\"data\"\n    rownames(stats_activity)=stats_activity$data\n    res$account_stats=stats_activity \n  }\n  \n  return(res)\n}\n",
    "created" : 1470263311150.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "744801207",
    "id" : "5E1F6EEF",
    "lastKnownWriteTime" : 1470263143,
    "last_content_update" : 1470263143,
    "path" : "~/Scrivania/alf_github/rTwChannel/R/channel_analytic.r",
    "project_path" : "R/channel_analytic.r",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}